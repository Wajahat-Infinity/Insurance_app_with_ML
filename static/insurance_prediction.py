# -*- coding: utf-8 -*-
"""Insurance prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m1brbsWz_8NehxR42Ll8yFkNUlPkKdx9

import libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as py
import matplotlib.pyplot as plt
import seaborn as sns

# %matplotlib inline

"""
loading dataset"""

df=pd.read_csv('insurance.csv')

df.sample(5)

df.shape

df.info()

df.isnull().sum()

df.describe()

df.duplicated().sum()

df =df.drop_duplicates(keep='first')

df.shape

"""Data Analysis"""

x_axis=['age','bmi','children','expenses']
for x in x_axis:
  sns.set_theme()
  fig, axes=plt.subplots(1,2,figsize=(18,4))
  sns.distplot(df[x],ax=axes[0], kde= False)
  sns.boxplot(df[x],ax=axes[1], orient="h", showmeans=True, color="green")

df['sex']=df.sex.map({'female':0,'male': 1})

df.shape

df.head()

df.smoker.unique()

df['smoker']=df.smoker.map({'yes':1,'no':0})

df.head()

df.region.unique()

df['region']=df.region.map({'southwest':1,'southeast':2,'northwest':3,'northeast':4})

df.head()

df.info()

"""spliting dataset"""

df.columns

#x is inputs and y is output(expenses)
x=df.drop(['expenses'],axis=1)

x.sample(5)

y=df[['expenses']]

y.head()

"""train test split"""

from sklearn.model_selection import train_test_split

x_train,x_test,y_train,y_test=train_test_split(x, y, test_size=0.2, random_state=42)

x_train.shape

x_test.shape

y_train.shape

y_test.shape

"""Model Training"""

from sklearn.linear_model import LinearRegression

lr=LinearRegression()

lr.fit(x_train,y_train)

y_predict=lr.predict(x_test)

y_predict

y_test

from sklearn.metrics import r2_score
score1=r2_score(y_test,y_predict)

score1

#support vector regressor
from sklearn.svm import SVR

svm=SVR()

svm.fit (x_train,y_train)

y_predicts=svm.predict(x_test)
from sklearn.metrics import r2_score
score2=r2_score(y_test,y_predicts)

score2

#random forest regressor
from sklearn.ensemble import RandomForestRegressor
rf=RandomForestRegressor()

rf.fit(x_train,y_train)

y_predict3=rf.predict(x_test)
from sklearn.metrics import r2_score
score3=r2_score(y_test,y_predict3)

score3

#predict charges on new customer
data={
    'age':19,
    'sex':0,
    'bmi':27.9,
    'children':0,
    'smoker':1,
    'region':1,
}
new_df=pd.DataFrame(data, index=[0])
new_df

pred=rf.predict(new_df)
pred[0]

#save model
import joblib
joblib.dump(rf,'random_forest_regressor')


